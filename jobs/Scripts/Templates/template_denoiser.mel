
global proc check_test_cases_fail_save_bilateral(string $test_case, string $script_info, int $denoiserRadius, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                rpr_fail_save($test_case, $script_info);
            }}
        }}
    }} else {{
        rpr_fail_save($test_case, $script_info);
    }}

}}

global proc check_test_cases_bilateral(string $test_case, string $script_info, int $denoiserRadius, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_bilateral($test_case, $script_info, $denoiserRadius, $scene);
            }}
        }}
    }} else {{
        prerender_bilateral($test_case, $script_info, $denoiserRadius, $scene);
    }}
}}

global proc prerender_bilateral(string $test_case, string $script_info, int $denoiserRadius, string $scene){{

    string $scene_name  = `file -q -sn -shn`;
    if ($scene_name != $scene) {{
        if (catch (`file -f -options "v=0;"  -ignoreVersion -o $scene`) == "1") {{
            evalDeferred("quit -abort");
        }}
    }}

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    // enable denoiser
    setAttr "RadeonProRenderGlobals.denoiserEnabled" 1;

    setAttr "RadeonProRenderGlobals.denoiserType" 0;
    setAttr "RadeonProRenderGlobals.denoiserRadius" $denoiserRadius;

    rpr_render($test_case, $script_info);
}}

global proc check_test_cases_fail_save_lwr(string $test_case, string $script_info, int $samples, int $radius, float $bandwidth, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                rpr_fail_save($test_case, $script_info);
            }}
        }}
    }} else {{
        rpr_fail_save($test_case, $script_info);
    }}

}}

global proc check_test_cases_lwr(string $test_case, string $script_info, int $samples, int $radius, float $bandwidth, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_lwr($test_case, $script_info, $samples, $radius, $bandwidth, $scene);
            }}
        }}
    }} else {{
        prerender_lwr($test_case, $script_info, $samples, $radius, $bandwidth, $scene);
    }}
}}

global proc prerender_lwr(string $test_case, string $script_info, int $samples, int $radius, float $bandwidth, string $scene){{

    string $scene_name  = `file -q -sn -shn`;
    if ($scene_name != $scene) {{
        if (catch (`file -f -options "v=0;"  -ignoreVersion -o $scene`) == "1") {{
            evalDeferred("quit -abort");
        }}
    }}

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    // enable denoiser
    setAttr "RadeonProRenderGlobals.denoiserEnabled" 1;

    setAttr "RadeonProRenderGlobals.denoiserType" 1;
    
    setAttr "RadeonProRenderGlobals.denoiserFilterRadius" $radius;
    setAttr "RadeonProRenderGlobals.denoiserSamples" $samples;
    setAttr "RadeonProRenderGlobals.denoiserBandwidth" $bandwidth;

    rpr_render($test_case, $script_info);

}}

global proc check_test_cases_fail_save_eaw(string $test_case, string $script_info, float $color, float $depth, float $normal, float $trans, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                rpr_fail_save($test_case, $script_info);
            }}
        }}
    }} else {{
        rpr_fail_save($test_case, $script_info);
    }}

}}

global proc check_test_cases_eaw(string $test_case, string $script_info, float $color, float $depth, float $normal, float $trans, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_eaw($test_case, $script_info, $color, $depth, $normal, $trans, $scene);
            }}
        }}
    }} else {{
        prerender_eaw($test_case, $script_info, $color, $depth, $normal, $trans, $scene);
    }}
}}

global proc prerender_eaw(string $test_case, string $script_info, float $color, float $depth, float $normal, float $trans, string $scene){{

    string $scene_name  = `file -q -sn -shn`;
    if ($scene_name != $scene) {{
        if (catch (`file -f -options "v=0;"  -ignoreVersion -o $scene`) == "1") {{
            evalDeferred("quit -abort");
        }}
    }}

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    // enable denoiser
    setAttr "RadeonProRenderGlobals.denoiserEnabled" 1;

    setAttr "RadeonProRenderGlobals.denoiserType" 2;
    
    setAttr "RadeonProRenderGlobals.denoiserColor" $color;
    setAttr "RadeonProRenderGlobals.denoiserDepth" $depth;
    setAttr "RadeonProRenderGlobals.denoiserNormal" $normal;
    setAttr "RadeonProRenderGlobals.denoiserTrans" $trans;

    rpr_render($test_case, $script_info);


}}

global proc main(){{

    setProject ("{res_path}");
    
    // <-- fail -->

    // <-- start -->

    @check_test_cases_bilateral("MAYA_RS_DEN_001", "[\"Bilateral Denoiser\", \"Radius - 1\"]", 1, "maya_shaderball.ma");
    @check_test_cases_bilateral("MAYA_RS_DEN_002", "[\"Bilateral Denoiser\", \"Radius - 5\"]", 3, "maya_shaderball.ma");
    @check_test_cases_bilateral("MAYA_RS_DEN_003", "[\"Bilateral Denoiser\", \"Radius - 10\"]", 6, "maya_shaderball.ma");
    
    @check_test_cases_lwr("MAYA_RS_DEN_004", "[\"LWR Denoiser\", \"Default settings\"]", 2, 1, 1, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_005", "[\"LWR Denoiser\", \"Samples - 5\"]", 5, 1, 1, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_006", "[\"LWR Denoiser\", \"Samples - 10\"]", 10, 1, 1, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_007", "[\"LWR Denoiser\", \"Filter Radius - 5\"]", 2, 5, 1, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_008", "[\"LWR Denoiser\", \"Filter Radius - 10\"]", 2, 10, 1, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_009", "[\"LWR Denoiser\", \"Bandwidth - 0.1\"]", 2, 1, 0.1001, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_010", "[\"LWR Denoiser\", \"Bandwidth - 0.5\"]", 2, 1, 0.5, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_011", "[\"LWR Denoiser\", \"Samples - 2\", \"Filter Radius - 1\", \"Bandwidth - 0.1\"]", 2, 1, 0.1001, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_012", "[\"LWR Denoiser\", \"Samples - 5\", \"Filter Radius - 5\", \"Bandwidth - 0.5\"]", 5, 5, 0.5, "maya_shaderball.ma");
    @check_test_cases_lwr("MAYA_RS_DEN_013", "[\"LWR Denoiser\", \"Samples - 10\", \"Filter Radius - 10\", \"Bandwidth - 1\"]", 10, 10, 1, "maya_shaderball.ma");

    @check_test_cases_eaw("MAYA_RS_DEN_014", "[\"EAW Denoiser\", \"Default Settings\"]", 1, 1, 1, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_015", "[\"EAW Denoiser\", \"Color - 0.1\"]", 0.1001, 1, 1, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_016", "[\"EAW Denoiser\", \"Color - 0.5\"]", 0.5, 1, 1, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_017", "[\"EAW Denoiser\", \"Depth - 0.1\"]", 1, 0.1001, 1, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_018", "[\"EAW Denoiser\", \"Depth - 0.5\"]", 1, 0.5, 1, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_019", "[\"EAW Denoiser\", \"Normal - 0.1\"]", 1, 1, 0.1001, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_020", "[\"EAW Denoiser\", \"Normal - 0.5\"]", 1, 1, 0.5, 1, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_021", "[\"EAW Denoiser\", \"Trans - 0.1\"]", 1, 1, 1, 0.1001, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_022", "[\"EAW Denoiser\", \"Trans - 0.5\"]", 1, 1, 1, 0.5, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_023", "[\"EAW Denoiser\", \"Color - 0.1\",  \"Depth - 0.1\", \"Normal - 0.1\", \"Trans - 0.1\"]", 0.1001, 0.1001, 0.1001, 0.1001, "maya_shaderball.ma");
    @check_test_cases_eaw("MAYA_RS_DEN_024", "[\"EAW Denoiser\", \"Color - 0.5\",  \"Depth - 0.5\", \"Normal - 0.5\", \"Trans - 0.5\"]", 0.5, 0.5, 0.5, 0.5, "maya_shaderball.ma");    

    // <-- end -->

    evalDeferred("quit -abort");
}}
