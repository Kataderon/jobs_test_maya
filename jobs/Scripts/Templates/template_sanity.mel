
global proc sanity_render(string $test_case, string $script_info, string $render_mode){{

	string $render_device = $render_mode;
	optionVar -rm "RPR_DevicesSelected";
	if ($render_device == "gpu") {{
		optionVar -iva "RPR_DevicesSelected" 1;
		optionVar -iva "RPR_DevicesSelected" 0;
	}} else if ($render_device == "cpu"){{
		optionVar -iva "RPR_DevicesSelected" 0;
		optionVar -iva "RPR_DevicesSelected" 1;
	}} else if ($render_device == "dual"){{
		optionVar -iva "RPR_DevicesSelected" 1;
		optionVar -iva "RPR_DevicesSelected" 1;
	}}

	float $startTime = 0;
	float $testTime = 0;
	fireRender -waitForItTwo;
	$startTime = `timerX`;
	renderIntoNewWindow render;
	string $ff = "";
	sysFile -makeDir ("{work_dir}" + "/Color");
	$ff = "{work_dir}" + "/Color/" + $test_case;
	renderWindowEditor -edit  -dst "color" renderView;
	renderWindowEditor -edit -com -writeImage $ff renderView;
	$testTime = `timerX -startTime $startTime`;

	string $scene_name  = `file -q -sn -shn`;
	if ($scene_name == "") {{
		$scene_name = "untitled";
	}}
	string $render_device_name[] = `optionVar -q "RPR_DevicesName"`;
	string $filePath = "{work_dir}" + "/" + $test_case + "_RPR.json";
	int $fileID = `fopen $filePath "a"`;
	fprint $fileID ("[");
	fprint $fileID ("\r\n {{");
	fprint $fileID ("\r\n  \"render_device\": \"" + $render_device_name[0] + "\",");
	fprint $fileID ("\r\n  \"tool\": \"Maya " + `about -version` + "\",");
	fprint $fileID ("\r\n  \"date_time\": \"" + `date -format "YYYY-MM-DD_hh-mm-ss"` + "\",");
	fprint $fileID ("\r\n  \"render_version\": \"" + getRPRPluginVersion() + "\",");
	fprint $fileID ("\r\n  \"core_version\": \"" + getRprCoreVersion() + "\",");
	fprint $fileID ("\r\n  \"file_name\": \"" + $test_case + ".jpg\",");
	fprint $fileID ("\r\n  \"render_color_path\": \"Color/" + $test_case + ".jpg\",");
	fprint $fileID ("\r\n  \"render_time\": " + $testTime + ",");
	fprint $fileID ("\r\n  \"scene_name\": \"" + $scene_name + "\",");
	fprint $fileID ("\r\n  \"test_type\": \"" + "{testType}" + "\",");
	fprint $fileID ("\r\n  \"test_case\": \"" + $test_case + "\",");
	fprint $fileID ("\r\n  \"difference_color\": \"" + "not compared yet" + "\",");
	fprint $fileID ("\r\n  \"test_status\": \"" + "passed" + "\",");
	fprint $fileID ("\r\n  \"script_info\": " + $script_info);
	fprint $fileID ("\r\n }}");
	fprint $fileID ("\r\n]");
	fclose $fileID;

}}

global proc prerender(string $test_case, int $pass, string $script_info, string $render_mode){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	if( `pluginInfo -query -loaded fbxmaya` == 0){{
    	loadPlugin fbxmaya;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" $pass;

	sanity_render($test_case, $script_info, $render_mode);

}}


global proc check_rpr_load(){{
	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	if( `pluginInfo -query -loaded fbxmaya` == 0){{
    	loadPlugin fbxmaya;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
}}


global proc create_ies_light(){{	
	source shelfCommands.mel; createIESLight();
	setAttr -type "string" "RPRIESLight.iesFile" ("{res_path}" + "/sourceimages/1.IES");
	select -r RPRIES1;
	move -r 270 50 1185;
	rotate -r -os -fo 90 00 0;
	setAttr "RPRIESLight.intensity" 5;
}}

global proc delete_ies_light(){{
	delete RPRIES1;
}}


global proc change_image_size_4k(){{
	setAttr "defaultResolution.width" 4000;
	setAttr "defaultResolution.height" 4000;
}}

global proc change_image_size_standart(){{
	setAttr "defaultResolution.width" 600;
	setAttr "defaultResolution.height" 600;
}}


global proc activate_jpg_format(){{
	setAttr "defaultRenderGlobals.imageFormat" 8;
}}

global proc activate_png_format(){{
	setAttr "defaultRenderGlobals.imageFormat" 32;
}}


global proc create_and_asign_lambert(){{
	string $rpr = `shadingNode -asShader "lambert"`; 
	setAttr ($rpr + ".color") 1 0 1;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r shaderball;
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc create_and_asign_uber(){{
	string $rpr = `shadingNode -asShader "RPRUberMaterial"`; 
	setAttr ($rpr + ".diffuse") 1; 
	setAttr ($rpr + ".diffuseColor") 1 0 0;
	setAttr "RPRUberMaterial1.reflections" 1;
	setAttr "RPRUberMaterial1.reflectWeight" 1;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r shaderball;
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc create_and_asign_pbr(){{
	string $rpr = `shadingNode -asShader "RPRPbrMaterial"`; 
	setAttr ($rpr + ".color") 0 0 1;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r shaderball;
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc change_camera_view(){{
	setAttr "Camera001.translateX" 300;
	setAttr "Camera001.translateY" 8;
	setAttr "Camera001.translateZ" 1230;
}}

global proc standart_camera_view(){{
	setAttr "Camera001.translateX" 267.558;
	setAttr "Camera001.translateY" 8.359;
	setAttr "Camera001.translateZ" 1236.609;
}}

global proc create_directional_light(){{
	defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
	setAttr "directionalLightShape1.intensity" 5;
}}

global proc delete_directional_light(){{
	delete directionalLight1;
}}

global proc main(){{
	
	setProject ("{res_path}");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;

	check_rpr_load();
	rpr_success_save("MAYA_SAN_001", "[\"Installing with default settings\"]");
    rpr_success_save("MAYA_SAN_002", "[\"Change renderer from default to RPR\"]");
    
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;

    	if ($each == "Lamborginhi_Aventador.ma") {{

    		activate_jpg_format();

    		prerender("MAYA_SAN_003", 10, "[\"Render empty scene\", \"Pass Limit: 10\"]", "gpu");


    	}} else if ($each == "maya_shaderball.ma") {{

    		activate_jpg_format();

    		prerender("MAYA_SAN_004", 10, "[\"GPU Render\", \"Pass Limit: 10\"]", "gpu");
    		prerender("MAYA_SAN_005", 10, "[\"CPU Render\", \"Pass Limit: 10\"]", "cpu");
    		prerender("MAYA_SAN_006", 10, "[\"Dual Render\", \"Pass Limit: 10\"]", "dual");

    		create_and_asign_lambert();
    		prerender("MAYA_SAN_007", 10, "[\"Lambert material test\", \"Pass Limit: 10\"]", "gpu");

    		create_and_asign_uber();
    		prerender("MAYA_SAN_008", 10, "[\"Uber material test\", \"Pass Limit: 10\"]", "gpu");

    		create_and_asign_pbr();
    		prerender("MAYA_SAN_009", 10, "[\"PBR material test\", \"Pass Limit: 10\"]", "gpu");

    		change_image_size_4k();
    		prerender("MAYA_SAN_010", 10, "[\"Render in 4K\", \"Pass Limit: 10\"]", "gpu");
    		change_image_size_standart();

    		change_camera_view();
    		prerender("MAYA_SAN_012", 10, "[\"Change camera view\", \"Pass Limit: 10\"]", "gpu");
    		standart_camera_view();

    		create_directional_light();
			prerender("MAYA_SAN_013", 10, "[\"Directional light\", \"Pass Limit: 10\"]", "gpu");
    		delete_directional_light();

    		create_ies_light();
    		prerender("MAYA_SAN_014", 10, "[\"Create IES Light\", \"Pass Limit: 10\"]", "gpu");
    		delete_ies_light();

    		activate_png_format();
    		prerender("MAYA_SAN_015", 10, "[\"Save image as png\", \"Pass Limit: 10\"]", "gpu");
    		sysFile -copy ("{work_dir}/Color/MAYA_SAN_015.jpg") ("{work_dir}" + "/../../../../jobs/Tests/pass.jpg");

    	}}
    	
    }}

	evalDeferred("quit -abort");
}}







