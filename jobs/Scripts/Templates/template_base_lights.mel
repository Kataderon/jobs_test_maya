
global proc check_test_cases_ambient_light(string $test_case, int $intensity, int $ambientShade, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_ambient_light($test_case, $intensity, $ambientShade, $script_info);
            }}
        }}
    }} else {{
        prerender_ambient_light($test_case, $intensity, $ambientShade, $script_info);
    }}
}}

global proc prerender_ambient_light(string $test_case, int $intensity, int $ambientShade, string $script_info){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "ambientLightShape1.intensity" $intensity;
    setAttr "ambientLightShape1.ambientShade" $ambientShade;

	rpr_render($test_case, $script_info);

}}


global proc check_test_cases_area_light(string $test_case, int $intensity, int $decayRate, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_area_light($test_case, $intensity, $decayRate, $script_info);
            }}
        }}
    }} else {{
        prerender_area_light($test_case, $intensity, $decayRate, $script_info);
    }}
}}

global proc prerender_area_light(string $test_case, int $intensity, int $decayRate, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "areaLightShape1.intensity" $intensity;
    setAttr "areaLightShape1.decayRate" $decayRate;

    rpr_render($test_case, $script_info);

}}


global proc check_test_cases_directional_light(string $test_case, int $intensity, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_directional_light($test_case, $intensity, $script_info);
            }}
        }}
    }} else {{
        prerender_directional_light($test_case, $intensity, $script_info);
    }}
}}

global proc prerender_directional_light(string $test_case, int $intensity, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "directionalLightShape1.intensity" $intensity;

    rpr_render($test_case, $script_info);

}}


global proc check_test_cases_point_light(string $test_case, int $intensity, int $decayRate, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_point_light($test_case, $intensity, $decayRate, $script_info);
            }}
        }}
    }} else {{
        prerender_point_light($test_case, $intensity, $decayRate, $script_info);
    }}
}}

global proc prerender_point_light(string $test_case, int $intensity, int $decayRate, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "pointLightShape1.intensity" $intensity;
    setAttr "pointLightShape1.decayRate" $decayRate;

    rpr_render($test_case, $script_info);

}}


global proc check_test_cases_spot_light(string $test_case, int $intensity, int $decayRate, float $coneAngle, float $penumbraAngle, float $dropoff, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_spot_light($test_case, $intensity, $decayRate, $coneAngle, $penumbraAngle, $dropoff, $script_info);
            }}
        }}
    }} else {{
        prerender_spot_light($test_case, $intensity, $decayRate, $coneAngle, $penumbraAngle, $dropoff, $script_info);
    }}
}}

global proc prerender_spot_light(string $test_case, int $intensity, int $decayRate, float $coneAngle, float $penumbraAngle, float $dropoff, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "spotLightShape1.intensity" $intensity;
    setAttr "spotLightShape1.decayRate" $decayRate;
    setAttr "spotLightShape1.coneAngle" $coneAngle;
    setAttr "spotLightShape1.penumbraAngle" $penumbraAngle;
    setAttr "spotLightShape1.dropoff" $dropoff;

    rpr_render($test_case, $script_info);

}}


global proc create_ambient_light(){{
    defaultAmbientLight(1, 0.45, 1,1,1, "0", 0,0,0, "1");
    setAttr "ambientLight1.translateX" 267;
    setAttr "ambientLight1.translateY" 40;
    setAttr "ambientLight1.translateZ" 1184;
}}

global proc delete_ambient_light(){{
    delete ambientLight1;
}}


global proc create_area_light(){{
    defaultAreaLight(1, 1,1,1, 0, 0, 0,0,0, 1, 0);
    setAttr "areaLight1.translateX" 267;
    setAttr "areaLight1.translateY" 40;
    setAttr "areaLight1.translateZ" 1184;
    setAttr "areaLight1.rotateX" -90;
    setAttr "areaLight1.rotateY" 0;
    setAttr "areaLight1.rotateZ" 0;
}}

global proc delete_area_light(){{
    delete areaLight1;
}}

 
global proc create_directional_light(){{
    defaultDirectionalLight(1, 1,1,1, "0", 0,0,0, 0);
    setAttr "directionalLight1.translateX" 267;
    setAttr "directionalLight1.translateY" 40;
    setAttr "directionalLight1.translateZ" 1184;
    setAttr "directionalLight1.rotateX" -90;
    setAttr "directionalLight1.rotateY" 0;
    setAttr "directionalLight1.rotateZ" 0;
}}

global proc delete_directional_light(){{
    delete directionalLight1;
}}


global proc create_point_light(){{
    defaultPointLight(1, 1,1,1, 0, 0, 0,0,0, 1);
    setAttr "pointLight1.translateX" 267;
    setAttr "pointLight1.translateY" 40;
    setAttr "pointLight1.translateZ" 1184;
    setAttr "pointLight1.rotateX" 0;
    setAttr "pointLight1.rotateY" 0;
    setAttr "pointLight1.rotateZ" 0;
}}

global proc delete_point_light(){{
    delete pointLight1;
}}


global proc create_spot_light(){{
    defaultSpotLight(1, 1,1,1, 0, 40, 0, 0, 0, 0,0,0, 1, 0);
    setAttr "spotLight1.translateX" 267;
    setAttr "spotLight1.translateY" 40;
    setAttr "spotLight1.translateZ" 1184;
    setAttr "spotLight1.rotateX" -90;
    setAttr "spotLight1.rotateY" 0;
    setAttr "spotLight1.rotateZ" 0;
}}

global proc delete_spot_light(){{
    delete spotLight1;
}}


global proc main(){{

	setProject ("{res_path}");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;
    	
        delete RPRIBL;

        create_ambient_light();
        check_test_cases_ambient_light("MAYA_L_BL_001", 1, 0.450, "[\"Ambient light. Intensity: 1. Ambient Shade: 0.450 (standart)\"]");
        check_test_cases_ambient_light("MAYA_L_BL_002", 3, 0.450, "[\"Ambient light. Intensity: 3. Ambient Shade: 0.450 (standart)\"]");
        check_test_cases_ambient_light("MAYA_L_BL_003", 3, 0, "[\"Ambient light. Intensity: 3. Ambient Shade: 0 \"]");
        check_test_cases_ambient_light("MAYA_L_BL_004", 3, 1, "[\"Ambient light. Intensity: 3. Ambient Shade: 1 \"]");
        delete_ambient_light();

        create_area_light();
        check_test_cases_area_light("MAYA_L_BL_005", 1, 0, "[\"Area light. Intensity: 1.\"]");
        check_test_cases_area_light("MAYA_L_BL_006", 3, 0, "[\"Area light. Intensity: 3.\"]");
        check_test_cases_area_light("MAYA_L_BL_007", 3, 1, "[\"Area light. Intensity: 3. Decay Rate: Linear \"]");
        check_test_cases_area_light("MAYA_L_BL_008", 3, 2, "[\"Area light. Intensity: 3. Decay Rate: Quadratic \"]");
        check_test_cases_area_light("MAYA_L_BL_009", 3, 3, "[\"Area light. Intensity: 3. Decay Rate: Cubic \"]");
        delete_area_light();

        create_directional_light();
        check_test_cases_directional_light("MAYA_L_BL_010", 1, "[\"Directional light. Intensity: 1.\"]");
        check_test_cases_directional_light("MAYA_L_BL_011", 5, "[\"Directional light. Intensity: 1.\"]");
        delete_directional_light();

        create_point_light();
        check_test_cases_point_light("MAYA_L_BL_012", 1, 0, "[\"Point light. Intensity: 1.\"]");
        check_test_cases_point_light("MAYA_L_BL_013", 50, 0, "[\"Point light. Intensity: 50.\"]");
        check_test_cases_point_light("MAYA_L_BL_014", 100, 0, "[\"Point light. Intensity: 100.\"]");
        check_test_cases_point_light("MAYA_L_BL_015", 50, 1, "[\"Point light. Intensity: 1. Decay Rate: Linear \"]");
        check_test_cases_point_light("MAYA_L_BL_016", 50, 2, "[\"Point light. Intensity: 1. Decay Rate: Quadratic \"]");
        check_test_cases_point_light("MAYA_L_BL_017", 50, 3, "[\"Point light. Intensity: 1. Decay Rate: Cubic \"]");
        delete_point_light();

        create_spot_light();
        check_test_cases_spot_light("MAYA_L_BL_018", 1, 0, 40, 0, 0, "[\"Spot light. Intensity: 1.\"]");
        check_test_cases_spot_light("MAYA_L_BL_019", 40, 0, 40, 0, 0, "[\"Spot light. Intensity: 1.\"]");
        check_test_cases_spot_light("MAYA_L_BL_020", 40, 0, 0.006, -10, 0, "[\"Spot light. Intensity: 40, Cone Angle: 0.006, Penumbra Angle: -10, Dropoff: 0\"]");
        check_test_cases_spot_light("MAYA_L_BL_021", 40, 0, 90, 0, 125, "[\"Spot light. Intensity: 40, Cone Angle: 90, Penumbra Angle: 0, Dropoff: 125\"]");
        check_test_cases_spot_light("MAYA_L_BL_022", 40, 0, 179.994, 10, 255, "[\"Spot light. Intensity: 40, Cone Angle: 0.006, Penumbra Angle: -10, Dropoff: 0\"]");
        check_test_cases_spot_light("MAYA_L_BL_023", 40, 1, 40, 0, 0, "[\"Spot light. Intensity: 1. Decay Rate: Linear\"]");
        check_test_cases_spot_light("MAYA_L_BL_024", 40, 2, 40, 0, 0, "[\"Spot light. Intensity: 1. Decay Rate: Quadratic\"]");
        check_test_cases_spot_light("MAYA_L_BL_025  ", 40, 3, 40, 0, 0, "[\"Spot light. Intensity: 1. Decay Rate: Cubic\"]");
        delete_spot_light();

	}}

	evalDeferred("quit -abort");
}}
