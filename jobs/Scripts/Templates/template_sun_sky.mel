
global proc setAttribute(string $attr, string $value){{
    
    if (`gmatch $value "*.*"`) {{

        string $file = `shadingNode -asTexture -isColorManaged file`;
        string $texture = `shadingNode -asUtility place2dTexture`;
        connectAttr -f ($texture+".coverage") ($file+".coverage");
        connectAttr -f ($texture+".translateFrame") ($file+".translateFrame");
        connectAttr -f ($texture+".rotateFrame") ($file+".rotateFrame");
        connectAttr -f ($texture+".mirrorU") ($file+".mirrorU");
        connectAttr -f ($texture+".mirrorV") ($file+".mirrorV");
        connectAttr -f ($texture+".stagger") ($file+".stagger");
        connectAttr -f ($texture+".wrapU") ($file+".wrapU");
        connectAttr -f ($texture+".wrapV") ($file+".wrapV");
        connectAttr -f ($texture+".repeatUV") ($file+".repeatUV");
        connectAttr -f ($texture+".offset") ($file+".offset");
        connectAttr -f ($texture+".rotateUV") ($file+".rotateUV");
        connectAttr -f ($texture+".noiseUV") ($file+".noiseUV");
        connectAttr -f ($texture+".vertexUvTwo") ($file+".vertexUvTwo");
        connectAttr -f ($texture+".vertexUvThree") ($file+".vertexUvThree");
        connectAttr -f ($texture+".vertexCameraOne") ($file+".vertexCameraOne");
        connectAttr -f ($texture+".outUV") ($file+".uv");
        connectAttr ($texture+".outUvFilterSize") ($file+".uvFilterSize");
        connectAttr ($texture+".vertexUvOne") ($file+".vertexUvOne");
        connectAttr -force ($file+".outColor") ("RPRSkyShape."+$attr);

        setAttr ($file+".fileTextureName") -type "string" $value;

    }} else {{
        string $values[];
        $numTokens = `tokenize $value ":" $values`;
        int $value0 = $values[0];
        int $value1 = $values[1];
        int $value2 = $values[2];
        setAttr ("RPRSkyShape."+$attr) -type double3 $value0 $value1 $value2;
    }}

}}


global proc check_test_cases(string $test_case, float $turbidity, float $intensity, string $filterColor, string $groundColor, string $groundAlbedo, float $sunGlow, float $sunDiskSize, int $sunPositionType, float $altitude, float $azimuth, int $year, int $month, int $day, int $hours, int $minutes, int $seconds, float $timeZone, float $latitude, float $longitude, int $daylightSaving, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender($test_case, $turbidity, $intensity, $filterColor, $groundColor, $groundAlbedo, $sunGlow, $sunDiskSize, $sunPositionType, $altitude, $azimuth, $year, $month, $day, $hours, $minutes, $seconds, $timeZone, $latitude, $longitude, $daylightSaving, $script_info);
            }}
        }}
    }} else {{
        prerender($test_case, $turbidity, $intensity, $filterColor, $groundColor, $groundAlbedo, $sunGlow, $sunDiskSize, $sunPositionType, $altitude, $azimuth, $year, $month, $day, $hours, $minutes, $seconds, $timeZone, $latitude, $longitude, $daylightSaving, $script_info);
    }}
}}

global proc prerender(string $test_case, float $turbidity, float $intensity, string $filterColor, string $groundColor, string $groundAlbedo, float $sunGlow, float $sunDiskSize, int $sunPositionType, float $altitude, float $azimuth, int $year, int $month, int $day, int $hours, int $minutes, int $seconds, float $timeZone, float $latitude, float $longitude, int $daylightSaving, string $script_info){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    string $allObjects[] = `ls -g`;
    string $exist = 0;

    for ($tempName in $allObjects)
        {{
            if ($tempName == "RPRIBLShape"){{
                delete RPRIBL;
            }}

            if ($tempName == "RPRSkyShape"){{
                $exist = 1;
            }}
        }}

    if ($exist == 0) {{
        string $SkyNode = `createNode RPRSky -n RPRSkyShape`;
    }}

    setAttr "RPRSkyShape.intensity" $intensity;
    setAttr "RPRSkyShape.turbidity" $turbidity;
    setAttr "RPRSkyShape.sunGlow" $sunGlow;
    setAttr "RPRSkyShape.sunDiskSize" $sunDiskSize;

    setAttribute("filterColor", $filterColor);
    setAttribute("groundColor", $groundColor);
    setAttribute("groundAlbedo", $groundAlbedo);

    setAttr "RPRSkyShape.sunPositionType" $sunPositionType;

    setAttr "RPRSkyShape.latitude" $latitude;
    setAttr "RPRSkyShape.longitude" $longitude;
    setAttr "RPRSkyShape.timeZone" $timeZone;
    setAttr "RPRSkyShape.year" $year;
    setAttr "RPRSkyShape.month" $month;
    setAttr "RPRSkyShape.day" $day;
    setAttr "RPRSkyShape.hours" $hours;
    setAttr "RPRSkyShape.minutes" $minutes;
    setAttr "RPRSkyShape.seconds" $seconds;
    setAttr "RPRSkyShape.daylightSaving" $daylightSaving;
    
    setAttr "RPRSkyShape.altitude" $altitude;
    setAttr "RPRSkyShape.azimuth" $azimuth;

	rpr_render($test_case, $script_info);

}}

global proc main(){{

	setProject ("{res_path}");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;

            check_test_cases("MAYA_RS_SS_001", 0.1, 0.1, "0:0:0", "0:0:0", "0:0:0", 2, 1, 0, 45, 0, 2016, 1, 1, 12, 0, 0, 0, 0, 0, 0, "[\"Sun&Sky System\"]");
            check_test_cases("MAYA_RS_SS_002", 0.1, 0.1, "sourceimages/mountain.png", "sourceimages/mountain.png", "sourceimages/mountain.png", 2, 1, 0, 45, 0, 2016, 1, 1, 12, 0, 0, 0, 0, 0, 0, "[\"Sun&Sky System\"]");
           

           // prerender($test_case, $turbidity, $intensity, $filterColor, $groundColor, $groundAlbedo, $sunGlow, $sunDiskSize, $sunPositionType, $altitude, $azimuth, $year, $month, $day, $hours, $minutes, $seconds, $timeZone, $latitude, $longitude, $daylightSaving);

	}}

	evalDeferred("quit -abort");
}}
