
global proc check_test_cases_area_light(string $test_case, float $areaWidth, float $areaLength, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, int $areaLightVisible, int $areaLightShape, int $shadowsEnabled, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_area_light($test_case, $areaWidth, $areaLength, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $areaLightVisible, $areaLightShape, $shadowsEnabled, $script_info);
            }}
        }}
    }} else {{
        prerender_area_light($test_case, $areaWidth, $areaLength, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $areaLightVisible, $areaLightShape, $shadowsEnabled, $script_info);
    }}
}}

global proc prerender_area_light(string $test_case, float $areaWidth, float $areaLength, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, int $areaLightVisible, int $areaLightShape, int $shadowsEnabled, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "RPRPhysicalLight1Shape.lightType" 0;
    setAttr "RPRPhysicalLight1Shape.areaWidth" $areaWidth;
    setAttr "RPRPhysicalLight1Shape.areaLength" $areaLength;
    setAttr "RPRPhysicalLight1Shape.intensityUnits" $intensityUnits;
    setAttr "RPRPhysicalLight1Shape.luminousEfficacy" $luminousEfficacy;
    setAttr "RPRPhysicalLight1Shape.areaLightShape" $areaLightShape;
    setAttr "RPRPhysicalLight1Shape.lightIntensity" $lightIntensity;
    setAttr "RPRPhysicalLight1Shape.areaLightVisible" $areaLightVisible;
    setAttr "RPRPhysicalLight1Shape.shadowsEnabled" $shadowsEnabled;
    setAttr "RPRPhysicalLight1Shape.colorMode" $colorMode;
    setAttr "RPRPhysicalLight1Shape.temperature" $temperature;

    rpr_render($test_case, $script_info);

}}


global proc check_test_cases_spot_light(string $test_case, float $spotLightInnerConeAngle, float $spotLightOuterConeFalloff, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_spot_light($test_case, $spotLightInnerConeAngle, $spotLightOuterConeFalloff, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $script_info);
            }}
        }}
    }} else {{
        prerender_spot_light($test_case, $spotLightInnerConeAngle, $spotLightOuterConeFalloff, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $script_info);
    }}
}}

global proc prerender_spot_light(string $test_case, float $spotLightInnerConeAngle, float $spotLightOuterConeFalloff, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "RPRPhysicalLight1Shape.lightType" 1;
    setAttr "RPRPhysicalLight1Shape.spotLightInnerConeAngle" $spotLightInnerConeAngle;
    setAttr "RPRPhysicalLight1Shape.spotLightOuterConeFalloff" $spotLightOuterConeFalloff;
    setAttr "RPRPhysicalLight1Shape.intensityUnits" $intensityUnits;
    setAttr "RPRPhysicalLight1Shape.luminousEfficacy" $luminousEfficacy;
    setAttr "RPRPhysicalLight1Shape.lightIntensity" $lightIntensity;
    setAttr "RPRPhysicalLight1Shape.colorMode" $colorMode;
    setAttr "RPRPhysicalLight1Shape.temperature" $temperature;

    rpr_render($test_case, $script_info);

}}


global proc check_test_cases_point_light(string $test_case, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_point_light($test_case, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $script_info);
            }}
        }}
    }} else {{
        prerender_point_light($test_case, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $script_info);
    }}
}}

global proc prerender_point_light(string $test_case, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "RPRPhysicalLight1Shape.lightType" 2;
    setAttr "RPRPhysicalLight1Shape.intensityUnits" $intensityUnits;
    setAttr "RPRPhysicalLight1Shape.luminousEfficacy" $luminousEfficacy;
    setAttr "RPRPhysicalLight1Shape.lightIntensity" $lightIntensity;
    setAttr "RPRPhysicalLight1Shape.colorMode" $colorMode;
    setAttr "RPRPhysicalLight1Shape.temperature" $temperature;

    rpr_render($test_case, $script_info);

}}


global proc check_test_cases_directional_light(string $test_case, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, float $shadowsSoftness, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_directional_light($test_case, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $shadowsSoftness, $script_info);
            }}
        }}
    }} else {{
        prerender_directional_light($test_case, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $shadowsSoftness, $script_info);
    }}
}}

global proc prerender_directional_light(string $test_case, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, float $shadowsSoftness, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "RPRPhysicalLight1Shape.lightType" 2;
    setAttr "RPRPhysicalLight1Shape.intensityUnits" $intensityUnits;
    setAttr "RPRPhysicalLight1Shape.luminousEfficacy" $luminousEfficacy;
    setAttr "RPRPhysicalLight1Shape.lightIntensity" $lightIntensity;
    setAttr "RPRPhysicalLight1Shape.colorMode" $colorMode;
    setAttr "RPRPhysicalLight1Shape.temperature" $temperature;
    setAttr "RPRPhysicalLight1Shape.shadowsSoftness" $shadowsSoftness;


    rpr_render($test_case, $script_info);

}}

global proc main(){{

    setProject ("{res_path}");
    string $scenes = "{testsList}";
    string $scene[];
    $numTokens = `tokenize $scenes "," $scene`;
    for ($each in $scene) {{
        file -f -options "v=0;"  -ignoreVersion -o $each;

        check_test_cases_area_light("MAYA_L_PL_001", 0, 1, 1, 3, 17, 0, 1, 0, 3, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_002", 0, 1, 1, 2, 17, 0, 1, 0, 4, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_003", 1, 1, 100, 3, 17, 0, 1, 0, 2, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_004", 1, 0, 1, 2, 17, 0, 1, 1, 1, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_005", 10, 10, 1, 1, 17, 0, 1, 0, 4, 0, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_006", 10, 1, 0, 2, 0.100001, 1, 0, 0, 0, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_007", 1, 1, 100, 0, 17, 1, 0, 0, 2, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_008", 1, 0, 1, 1, 17, 1, 4000, 1, 3, 0, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_009", 1, 1, 0, 2, 17, 1, 4000, 0, 0, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_010", 1, 10, 1, 0, 17, 0, 1, 0, 1, 1, "[\"Area light.\"]");

        check_test_cases_spot_light("MAYA_L_PL_011", 0, 0, 0, 2, 0.100001, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_012", 43, 45, 0, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_013", 43, 0, 0, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_014", 0, 45, 1, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_015", 45, 149, 1, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_016", 43, 45, 1, 2, 17, 1, 40000, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_017", 179, 45, 100, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_018", 43, 45, 100, 2, 17, 1, 0, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_019", 0, 149, 100, 2, 100, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_020", 45, 45, 100, 0, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_021", 43, 0, 1, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_022", 43, 45, 1, 0, 17, 1, 0, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_023", 43, 149, 1, 2, 17, 1, 40000, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_024", 43, 45, 1, 2, 17, 1, 0, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_025", 0, 45, 1, 2, 17, 1, 40000, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_026", 45, 45, 1, 0, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_027", 179, 45, 1, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_028", 43, 149, 1, 2, 17, 0, 1, "[\"Spot light.\"]");
        check_test_cases_spot_light("MAYA_L_PL_029", 45, 0, 1, 2, 17, 1, 40000, "[\"Spot light.\"]");


        check_test_cases_point_light("MAYA_L_PL_030", 0, 2, 0.100001, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_031", 0, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_032", 1, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_033", 1, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_034", 1, 2, 17, 1, 40000, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_035", 100, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_036", 100, 2, 17, 1, 0, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_037", 100, 2, 100, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_038", 100, 0, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_039", 30, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_040", 30, 0, 17, 1, 0, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_041", 30, 2, 17, 1, 40000, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_042", 30, 2, 17, 1, 0, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_043", 30, 2, 17, 1, 40000, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_044", 30, 0, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_045", 30, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_046", 30, 2, 17, 0, 1, "[\"Point light.\"]");
        check_test_cases_point_light("MAYA_L_PL_047", 30, 2, 17, 1, 40000, "[\"Point light.\"]");


        check_test_cases_directional_light("MAYA_L_PL_048", 0, 3, 0.100001, 0, 1, 0, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_049", 0, 3, 17, 0, 1, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_050", 1, 3, 17, 0, 1, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_051", 1, 3, 17, 0, 1, 0, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_052", 1, 3, 17, 0, 1, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_053", 1, 3, 17, 1, 40000, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_054", 100, 3, 17, 0, 1, 1, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_055", 100, 3, 17, 1, 0, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_056", 100, 3, 100, 0, 1, 0, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_057", 100, 1, 17, 0, 1, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_058", 50, 1, 17, 1, 0, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_059", 50, 3, 17, 1, 40000, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_060", 50, 3, 17, 1, 0, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_061", 50, 3, 17, 1, 40000, 0, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_062", 50, 1, 17, 0, 1, 0.5, "[\"Directional light.\"]");
        check_test_cases_directional_light("MAYA_L_PL_063", 50, 3, 17, 0, 1, 1, "[\"Directional light.\"]");


        // prerender_spot_light($test_case, $spotLightInnerConeAngle, $spotLightOuterConeFalloff, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $script_info);

    }}

    evalDeferred("quit -abort");
}}
