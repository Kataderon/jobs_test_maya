
global proc check_test_cases_area_light(string $test_case, float $areaWidth, float $areaLength, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, int $areaLightVisible, int $areaLightShape, int $shadowsEnabled, string $script_info){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender_area_light($test_case, $areaWidth, $areaLength, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $areaLightVisible, $areaLightShape, $shadowsEnabled, $script_info);
            }}
        }}
    }} else {{
        prerender_area_light($test_case, $areaWidth, $areaLength, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $areaLightVisible, $areaLightShape, $shadowsEnabled, $script_info);
    }}
}}

global proc prerender_area_light(string $test_case, float $areaWidth, float $areaLength, float $lightIntensity, int $intensityUnits, float $luminousEfficacy, int $colorMode, int $temperature, int $areaLightVisible, int $areaLightShape, int $shadowsEnabled, string $script_info){{

    if( `pluginInfo -query -loaded RadeonProRender` == 0){{
        loadPlugin RadeonProRender;
    }}

    if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
    setAttr "defaultRenderGlobals.imageFormat" 8;
    setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    setAttr "RPRPhysicalLight1Shape.lightType" 0;
    setAttr "RPRPhysicalLight1Shape.areaWidth" $areaWidth;
    setAttr "RPRPhysicalLight1Shape.areaLength" $areaLength;
    setAttr "RPRPhysicalLight1Shape.intensityUnits" $intensityUnits;
    setAttr "RPRPhysicalLight1Shape.luminousEfficacy" $luminousEfficacy;
    setAttr "RPRPhysicalLight1Shape.areaLightShape" $areaLightShape;
    setAttr "RPRPhysicalLight1Shape.lightIntensity" $lightIntensity;
    setAttr "RPRPhysicalLight1Shape.areaLightVisible" $areaLightVisible;
    setAttr "RPRPhysicalLight1Shape.shadowsEnabled" $shadowsEnabled;
    setAttr "RPRPhysicalLight1Shape.colorMode" $colorMode;
    setAttr "RPRPhysicalLight1Shape.temperature" $temperature;

    rpr_render($test_case, $script_info);

}}


global proc main(){{

    setProject ("{res_path}");
    string $scenes = "{testsList}";
    string $scene[];
    $numTokens = `tokenize $scenes "," $scene`;
    for ($each in $scene) {{
        file -f -options "v=0;"  -ignoreVersion -o $each;

        check_test_cases_area_light("MAYA_L_PL_001", 0, 1, 1, 3, 17, 0, 1, 0, 3, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_002", 0, 1, 1, 2, 17, 0, 1, 0, 4, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_003", 1, 1, 100, 3, 17, 0, 1, 0, 2, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_004", 1, 0, 1, 2, 17, 0, 1, 1, 1, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_005", 10, 10, 1, 1, 17, 0, 1, 0, 4, 0, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_006", 10, 1, 0, 2, 0.1, 1, 0, 0, 0, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_007", 1, 1, 100, 0, 17, 1, 0, 0, 2, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_008", 1, 0, 1, 1, 17, 1, 4000, 1, 3, 0, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_009", 1, 1, 0, 2, 17, 1, 4000, 0, 0, 1, "[\"Area light.\"]");
        check_test_cases_area_light("MAYA_L_PL_010", 1, 10, 1, 0, 17, 0, 1, 0, 1, 1, "[\"Area light.\"]");
        
        // prerender_area_light($test_case, $areaWidth, $areaLength, $lightIntensity, $intensityUnits, $luminousEfficacy, $colorMode, $temperature, $areaLightVisible, $areaLightShape, $shadowsEnabled, $script_info);
    }}

    evalDeferred("quit -abort");
}}
