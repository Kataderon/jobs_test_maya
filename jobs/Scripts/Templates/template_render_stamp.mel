
global proc check_test_cases_fail_save(string $test_case, string $stamp, string $script_info, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                rpr_fail_save($test_case, $script_info);
            }}
        }}
    }} else {{
        rpr_fail_save($test_case, $script_info);
    }}

}}

global proc check_test_cases(string $test_case, string $stamp, string $script_info, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender($test_case, $stamp, $script_info, $scene);
            }}
        }}
    }} else {{
        prerender($test_case, $stamp, $script_info, $scene);
    }}
}}

global proc prerender(string $test_case, string $stamp, string $script_info, string $scene){{

    string $scene_name  = `file -q -sn -shn`;
    if ($scene_name != $scene) {{
        if (catch (`file -f -options "v=0;"  -ignoreVersion -o $scene`) == "1") {{
            evalDeferred("quit -abort");
        }}
    }}

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

	if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

	setAttr "RadeonProRenderGlobals.useRenderStamp" 1;
	setAttr -type "string" RadeonProRenderGlobals.renderStampText $stamp;

	rpr_render($test_case, $script_info);
	
}}

global proc main(){{

	setProject ("{res_path}");

    // <-- fail -->

    // <-- start -->
	
	@check_test_cases("MAYA_RS_RS_001", "Radeon ProRender for Blender %b | %h | Time: %pt | Passes: %pp | Objects: %so | Lights: %sl", "[\"Base stamp\"]", "maya_shaderball.ma");
	@check_test_cases("MAYA_RS_RS_002", "Radeon ProRender for Blender %b | CPU %c | GPU %g | Render mode %r | Render device %h", "[\"CPU&GPU stamp\"]", "maya_shaderball.ma");
	@check_test_cases("MAYA_RS_RS_003", "Radeon ProRender for Blender %b | Computer name %i | Current date %d", "[\"Computer name stamp\"]", "maya_shaderball.ma");

    // <-- end -->

	evalDeferred("quit -abort");
}}
