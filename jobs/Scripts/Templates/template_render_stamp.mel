
global proc prerender(string $test_case, string $stamp, string $script_info){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

	if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

	setAttr "RadeonProRenderGlobals.useRenderStamp" 1;
	setAttr -type "string" RadeonProRenderGlobals.renderStampText $stamp;

	rpr_render($test_case, $script_info);

}}

global proc main(){{

	setProject ("{res_path}");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;
    	prerender("MAYA_RS_RS_001", "Radeon ProRender for Blender %b | %h | Time: %pt | Passes: %pp | Objects: %so | Lights: %sl", "[\"Base stamp\"]");
    	prerender("MAYA_RS_RS_002", "Radeon ProRender for Blender %b | CPU %c | GPU %g | Render mode %r | Render device %h", "[\"CPU&GPU stamp\"]");
    	prerender("MAYA_RS_RS_003", "Radeon ProRender for Blender %b | Computer name %i | Current date %d", "[\"Computer name stamp\"]");
	}}

	evalDeferred("quit -abort");
}}
