
global proc check_test_cases_fail_save(string $test_case, string $script_info, string $render_layer, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                rpr_fail_save($test_case, $script_info);
            }}
        }}
    }} else {{
        rpr_fail_save($test_case, $script_info);
    }}

}}

global proc check_test_cases(string $test_case, string $script_info, string $render_layer, string $scene){{

    string $tests = "{testCases}";
    string $test[];
    $numTokens = `tokenize $tests "," $test`;

    if ($tests != "all") {{
        for ($each in $test) {{ 
            if ($each == $test_case) {{
                prerender($test_case, $script_info, $render_layer, $scene);
            }}
        }}
    }} else {{
        prerender($test_case, $script_info, $render_layer, $scene);
    }}
}}


global proc prerender(string $test_case, string $script_info, string $render_layer, string $scene){{

    string $scene_name  = `file -q -sn -shn`;
    if ($scene_name != $scene) {{
        if (catch (`file -f -options "v=0;" -prompt 0 -ignoreVersion -o $scene`) == "1") {{
            evalDeferred("quit -abort");
        }}
        validateFiles();
    }}

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

	if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

    editRenderLayerGlobals -currentRenderLayer $render_layer;

	rpr_render($test_case, $script_info);
	
}}

global proc main(){{

	setProject ("{res_path}");

    // <-- fail -->

    // <-- start -->
	
	@check_test_cases("MAYA_RS_RL_001", "[\"Render Layer - rs_L03_BEAUTY\"]", "rs_L03_BEAUTY", "render_layer.ma");
    @check_test_cases("MAYA_RS_RL_002", "[\"Render Layer - rs_ALL_SHADOW\"]", "rs_ALL_SHADOW", "render_layer.ma");
    @check_test_cases("MAYA_RS_RL_003", "[\"Render Layer - rs_L02_BEAUTY\"]", "rs_L02_BEAUTY", "render_layer.ma");
    @check_test_cases("MAYA_RS_RL_004", "[\"Render Layer - rs_POL_BEAUTY\"]", "rs_POL_BEAUTY", "render_layer.ma");
    @check_test_cases("MAYA_RS_RL_005", "[\"Render Layer - rs_L01_BEAUTY\"]", "rs_L01_BEAUTY", "render_layer.ma");
    @check_test_cases("MAYA_RS_RL_006", "[\"Render Layer - masterLayer\"]", "defaultRenderLayer", "render_layer.ma");

    // <-- end -->

	evalDeferred("quit -abort");
}}
