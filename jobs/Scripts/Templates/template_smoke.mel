
global proc prerender(string $test_case, int $pass, string $script_info){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" $pass;

	if ({resolution_x} && {resolution_y}) {{
        setAttr "defaultResolution.width" {resolution_x};
        setAttr "defaultResolution.height" {resolution_y};
    }}

	rpr_render($test_case, $script_info);

}}

global proc import_fbx(){{
	FBXImport -f ("{res_path}" + "/sourceimages/park_bench1.fbx");
}}

global proc import_obj(){{
	delete Default;
	file -import -type "OBJ" -options "mo=-1"  -pr ("{res_path}" + "/sourceimages/example.obj");
	rename "polySurface1" "Shader_Ball";
}}


global proc test_Uber(){{

	string $rpr = `shadingNode -asShader "RPRUberMaterial"`; 
	setAttr ($rpr + ".diffuse") 1; 
	setAttr ($rpr + ".diffuseColor") 1 0 0;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r "Shader_Ball";
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc test_IBL_on(){{
	delete RPRSky;
	string $iblNode = `createNode RPRIBL -n RPRIBLShape`;
	$parent = `listRelatives -p $iblNode`;
	setAttr ($parent[0] + ".scaleX") 1001.25663706144;
	setAttr ($parent[0] + ".scaleY") 1001.25663706144;
	setAttr ($parent[0] + ".scaleZ") 1001.25663706144;
	rename $parent[0] RPRIBL;
}}

global proc test_IBL_hdr(){{
	setAttr -type "string" RPRIBLShape.filePath ("{res_path}" + "/sourceimages/Tropical_Beach_3k.hdr");
}}

global proc test_IBL_exr(){{
	setAttr -type "string" RPRIBLShape.filePath ("{res_path}" + "/sourceimages/ibl_test.exr");
}}

global proc test_sun_sky(){{
	string $SkyNode = `createNode RPRSky -n RPRSkyShape`;
}}

global proc main(){{
	
	setProject ("{res_path}");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;

    	if ($each == "default.ma") {{
    		prerender("MAYA_SM_003", 15, "[\"Render empty scene\", \"Pass Limit: 50\"]");
    	}} else if ($each == "rpr_default.ma") {{
    		prerender("MAYA_SM_005", 15, "[\"Render empty scene with RPR parameters\", \"Pass Limit: 50\"]");

    		import_fbx();
    		prerender("MAYA_SM_006", 15, "[\"Import FBX\", \"Pass Limit: 50\"]" );

    		import_obj();
    		prerender("MAYA_SM_007", 15, "[\"Import OBJ\", \"Pass Limit: 50\"]");

    		test_Uber();
    		prerender("MAYA_SM_010", 15, "[\"Testing Uber material\", \"Pass Limit: 50\"]");

    		test_sun_sky();
    		prerender("MAYA_SM_013", 15, "[\"Testing Sun and Sky System\", \"Pass Limit: 50\"]");

    		test_IBL_on();
    		prerender("MAYA_SM_014", 15, "[\"Testing IBL\", \"Pass Limit: 50\"]");

    		test_IBL_hdr();
    		prerender("MAYA_SM_015", 15, "[\"Testing IBL with hdr\", \"Pass Limit: 50\"]");

    		test_IBL_hdr();
    		prerender("MAYA_SM_016", 15, "[\"Testing IBL with exr\", \"Pass Limit: 50\"]");

    		prerender("MAYA_SM_017", 1, "[\"Iteration test\", \"Pass Limit: 1\"]");
    		prerender("MAYA_SM_018", 30, "[\"Iteration test\", \"Pass Limit: 30\"]");
    		//prerender("MAYA_SM_019", 100, "[\"Iteration test\", \"Pass Limit: 100\"]");
    		//prerender("MAYA_SM_020", 500, "[\"Iteration test\", \"Pass Limit: 500\"]");
    		//prerender("MAYA_SM_021", 1000, "[\"Iteration test\", \"Pass Limit: 1000\"]");

    	}}
    }}

	evalDeferred("quit -abort");
}}







