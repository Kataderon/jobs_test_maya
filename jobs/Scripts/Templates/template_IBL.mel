
global proc config(string $test_name, int $intensity, int $map){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" {pass_limit};

    string $exist = 0;
    string $allObjects[] = `ls -g`;
    for ($tempName in $allObjects)
        {{
            if ($tempName == "RPRIBLShape"){{
                $exist = 1;
            }}
        }}

    string $iblNode;
    string $parent[];
    
    if ($exist == 0) {{
        $iblNode = `createNode RPRIBL -n RPRIBLShape`;
        $parent = `listRelatives -p $iblNode`;
        setAttr ($parent[0] + ".scaleX") 1001.25663706144;
        setAttr ($parent[0] + ".scaleY") 1001.25663706144;
        setAttr ($parent[0] + ".scaleZ") 1001.25663706144;
        rename $parent[0] RPRIBL;
    }}

    setAttr "RPRIBLShape.intensity" $intensity;

    if ($map) {{

    	string $test_name_exr = "";
        $test_name_exr = $test_name + "_" + $intensity + "_exr";

        setAttr -type "string" RPRIBLShape.filePath "sourceimages/Tropical_Beach_3k.hdr";
        $test_name = $test_name + "_" + $intensity + "_hdr";
        save_render($test_name);

        setAttr -type "string" RPRIBLShape.filePath "sourceimages/ibl_test.exr";
        save_render($test_name_exr);
    
    }} else {{

        setAttr -type "string" RPRIBLShape.filePath "";
        $test_name = $test_name + "_" + $map + "_" + $intensity;
		save_render($test_name);
    }}

}}

global proc main(){{

	setProject ("C:/TestResources/MayaAssets");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;
            config($each, 0, 0);
            config($each, 1, 0);
            config($each, 2, 0);
            config($each, 3, 0);
            config($each, 5, 0);
            config($each, 7, 0);
            config($each, 10, 0);
            config($each, 0, 0);
            config($each, 1, 1);
            config($each, 2, 1);
            config($each, 3, 1);
            config($each, 5, 1);
            config($each, 7, 1);
            config($each, 10, 1);
	}}

	evalDeferred("quit -abort");
}}
