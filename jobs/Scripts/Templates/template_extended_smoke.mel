
global proc prerender(string $test_case, int $pass, string $script_info){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
		loadPlugin RadeonProRender;
	}}

	if( `pluginInfo -query -loaded fbxmaya` == 0){{
    	loadPlugin fbxmaya;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" $pass;

	rpr_render($test_case, $script_info);
			
}}


global proc check_rpr_load(){{
	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	if( `pluginInfo -query -loaded fbxmaya` == 0){{
    	loadPlugin fbxmaya;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
}}


global proc import_fbx(){{
	FBXImport -f ("{res_path}" + "/sourceimages/park_bench1.fbx");
}}

global proc delete_fbx(){{
	delete Default;
}}


global proc create_IBL(){{
	hide ground;
	string $iblNode = `createNode RPRIBL -n RPRIBLShape`;
	$parent = `listRelatives -p $iblNode`;
	setAttr ($parent[0] + ".scaleX") 1001.25663706144;
	setAttr ($parent[0] + ".scaleY") 1001.25663706144;
	setAttr ($parent[0] + ".scaleZ") 1001.25663706144;
	rename $parent[0] RPRIBL;
}}

global proc update_IBL_hdr(){{
	setAttr -type "string" RPRIBLShape.filePath ("{res_path}" + "/sourceimages/Tropical_Beach_3k.hdr");
}}

global proc update_IBL_exr(){{
	setAttr -type "string" RPRIBLShape.filePath ("{res_path}" + "/sourceimages/ibl_test.exr");
}}

global proc delete_IBL(){{
	showHidden ground;
	delete RPRIBL;
}}


global proc create_sun_sky(){{
	string $SkyNode = `createNode RPRSky -n RPRSkyShape`;
	setAttr "RPRSkyShape.turbidity" 30;
	setAttr "RPRSkyShape.intensity" 6;
}}

global proc delete_sun_sky(){{
	delete RPRSky;
}}


global proc create_ies_light(){{	
	source shelfCommands.mel; createIESLight();
	setAttr -type "string" "RPRIESLight.iesFile" ("{res_path}" + "/sourceimages/1.IES");
	select -r RPRIES1;
	move -r 0 400 0;
	rotate -r -os -fo 0 90 0;
	setAttr "RPRIESLight.intensity" 20;
}}

global proc delete_ies_light(){{
	delete RPRIES1;
}}


global proc create_physical_light(){{	
	source shelfCommands.mel; createPhysicalLight();
	select -r RPRPhysicalLight1;
	setAttr "RPRPhysicalLight1.translateY" 400;
	setAttr "RPRPhysicalLight1.rotateX" 270;
    setAttr "RPRPhysicalLight1Shape.lightIntensity" 100;
    setAttr "RPRPhysicalLight1Shape.intensityUnits" 0;
}}

global proc delete_physical_light(){{
	delete RPRPhysicalLight1;
}}


global proc import_obj(){{
	file -import -type "OBJ" -options "mo=-1"  -pr ("{res_path}" + "/sourceimages/example.obj");
	rename "polySurface1" "Shader_Ball";
	setAttr "Shader_Ball.translate" -3.774 -1.4 -3.865;
	setAttr "Shader_Ball.scale" 2 2 2;
}}

global proc delete_obj(){{
	delete Shader_Ball;
}}


global proc activate_tone_mapping(){{
	setAttr "RadeonProRenderGlobals.applyGammaToMayaViews" 1;
	setAttr "RadeonProRenderGlobals.toneMappingWhiteBalanceEnabled" 1;
}}

global proc deactivate_tone_mapping(){{
	setAttr "RadeonProRenderGlobals.applyGammaToMayaViews" 0;
	setAttr "RadeonProRenderGlobals.toneMappingWhiteBalanceEnabled" 0;
}}


global proc activate_render_stamp(){{
	setAttr "RadeonProRenderGlobals.useRenderStamp" 1;
}}

global proc deactivate_render_stamp(){{
	setAttr "RadeonProRenderGlobals.useRenderStamp" 0;
}}


global proc activate_wireframe_mode(){{
	setAttr "RadeonProRenderGlobals.renderMode" 4;
}}

global proc deactivate_wireframe_mode(){{
	setAttr "RadeonProRenderGlobals.renderMode" 1;
}}


global proc activate_medium_quality(){{
	setAttr "RadeonProRenderGlobals.samples" 8;
	setAttr "RadeonProRenderGlobals.maxRayDepth" 15;
}}

global proc deactivate_medium_quality(){{
	setAttr "RadeonProRenderGlobals.samples" 1;
	setAttr "RadeonProRenderGlobals.maxRayDepth" 5;
}}


global proc change_image_size_hd720(){{
	setAttr "defaultResolution.width" 1280;
	setAttr "defaultResolution.height" 720;
	setAttr "defaultResolution.dotsPerInch" 72;
	setAttr "defaultResolution.deviceAspectRatio" 1.778;
	setAttr "defaultResolution.pixelAspect" 1.00;
}}

global proc change_image_size_custom(){{
	setAttr "defaultResolution.width" 1500;
	setAttr "defaultResolution.height" 1125;
}}

global proc change_image_size_standart(){{
	setAttr "defaultResolution.width" 1480;
	setAttr "defaultResolution.height" 800;
	setAttr "defaultResolution.dotsPerInch" 72;
	setAttr "defaultResolution.deviceAspectRatio" 1.850;
	setAttr "defaultResolution.pixelAspect" 1.00;
}}


global proc activate_jpg_format(){{
	setAttr "defaultRenderGlobals.imageFormat" 8;
}}

global proc activate_png_format(){{
	setAttr "defaultRenderGlobals.imageFormat" 32;
}}


global proc activate_denoiser_bilateral(){{
	setAttr "RadeonProRenderGlobals.denoiserEnabled" 1;
	setAttr "RadeonProRenderGlobals.denoiserType" 0;
	setAttr "RadeonProRenderGlobals.denoiserRadius" 1;
}}

global proc activate_denoiser_lwr(){{
	setAttr "RadeonProRenderGlobals.denoiserEnabled" 1;
	setAttr "RadeonProRenderGlobals.denoiserType" 1;
}}

global proc activate_denoiser_eaw(){{
	setAttr "RadeonProRenderGlobals.denoiserEnabled" 1;
	setAttr "RadeonProRenderGlobals.denoiserType" 2;	
}}

global proc deactivate_denoiser(){{
	setAttr "RadeonProRenderGlobals.denoiserEnabled" 0;
}}

global proc import_rpr_matlib(){{
	python("import fireRender.rpr_material_browser");
	string $libraryPath = python("fireRender.rpr_material_browser.getLibPath()");
	string $material = "Fiberglass";
    string $material_path = $libraryPath + "/" + $material;
	string $xml[] = `getFileList -folder $material_path -filespec "*.xml"`;
	$material_path = $material_path + "/" + $xml[0];

	RPRXMLImport -file $material_path -ii false -mn "materialTestNode";
	select -r Lamborginhi_Aventador;
	sets -e -forceElement "materialTestNodeSG";
}}


global proc create_area_light(){{
	defaultAreaLight(1, 1,1,1, 0, 0, 0,0,0, 1, 0);
	setAttr "areaLightShape1.intensity" 20;
	setAttr "areaLight1.translateY" 400;
	setAttr "areaLight1.rotateX" 270;
}}

global proc delete_area_light(){{
	delete areaLight1;	
}}


global proc activate_uv(){{
	setAttr "RadeonProRenderGlobals.aovDisplayedInRenderView" 3;
}}

global proc deactivate_uv(){{
	setAttr "RadeonProRenderGlobals.aovDisplayedInRenderView" 0;
}}


global proc duplicate_500_instances(){{
	select -r Cube ;
	instance; rotate -r 0 10 0; move -r 0.025 0.025 0.025; for ($i=1; $i<500; ++$i) instance -st;
}}


global proc create_and_asign_uber(){{
	string $rpr = `shadingNode -asShader "RPRUberMaterial"`; 
	setAttr ($rpr + ".diffuse") 1; 
	setAttr ($rpr + ".diffuseColor") 1 0 0;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r Lamborginhi_Aventador;
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc create_and_asign_pbr(){{
	string $rpr = `shadingNode -asShader "RPRPbrMaterial"`; 
	setAttr ($rpr + ".color") 0 0 1;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r Lamborginhi_Aventador;
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}


global proc multiple_ies_lights(){{	
	// for ($i=1; $i<13; ++$i){{
	// 	 setAttr -type "string" ("RPRIESLight" + $i +".iesFile") ("{res_path}" + "/sourceimages/1.IES");
	//	 setAttr ("RPRIESLight" + $i +".intensity") 2;
	// }}

	setAttr -type "string" ("RPRIESLight1.iesFile") ("{res_path}" + "/sourceimages/1.IES");
	setAttr ("RPRIESLight1.intensity") 2;
	setAttr -type "string" ("RPRIESLight6.iesFile") ("{res_path}" + "/sourceimages/6.IES");
	setAttr ("RPRIESLight6.intensity") 2;
	setAttr -type "string" ("RPRIESLight12.iesFile") ("{res_path}" + "/sourceimages/12.IES");
	setAttr ("RPRIESLight12.intensity") 2;
	
}}


global proc shadow_catcher_test(){{
	setAttr "RadeonProRenderGlobals.aovOpacity" 1;
	setAttr "RadeonProRenderGlobals.aovBackground" 1;
	setAttr "RadeonProRenderGlobals.aovShadowCatcher" 1;
	string $rpr = `shadingNode -asShader "RPRShadowCatcherMaterial"`; 
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r Plane01;
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc main(){{
	
	setProject ("{res_path}");
	string $scenes = "{testsList}";
	string $scene[];
	$numTokens = `tokenize $scenes "," $scene`;


	check_rpr_load();
	rpr_success_save("MAYA_SM_001", "[\"Installing with default settings\"]");
    rpr_success_save("MAYA_SM_002", "[\"Change renderer from default to RPR\"]");
    
	for ($each in $scene) {{
    	file -f -options "v=0;"  -ignoreVersion -o $each;

    	if ($each == "default.ma") {{

    		activate_jpg_format();

    		import_fbx();
    		prerender("MAYA_SM_003", 50, "[\"Test import FBX\", \"Pass Limit: 50\"]");
    		delete_fbx();

    		import_obj();
    		prerender("MAYA_SM_004", 50, "[\"Test import OBJ\", \"Pass Limit: 50\"]");
    		delete_obj();

    	}} else if ($each == "Lamborginhi_Aventador.ma") {{

    		activate_jpg_format();

    		rpr_success_save("MAYA_SM_005", "[\"Open RPR scene\"]");

    		create_IBL();
    		prerender("MAYA_SM_006", 50, "[\"Create IBL\", \"Pass Limit: 50\"]");
    		update_IBL_hdr();
    		prerender("MAYA_SM_007", 50, "[\"Test IBL HDR\", \"Pass Limit: 50\"]");
    		update_IBL_exr();
    		prerender("MAYA_SM_008", 50, "[\"Test IBL EXR\", \"Pass Limit: 50\"]");
    		delete_IBL();

    		create_sun_sky();
    		prerender("MAYA_SM_009", 50, "[\"Create Sun&Sky\", \"Pass Limit: 50\"]");
    		delete_sun_sky();

    		create_ies_light();
    		prerender("MAYA_SM_010", 50, "[\"Create IES Light\", \"Pass Limit: 50\"]");
    		delete_ies_light();

    		prerender("MAYA_SM_011", 1, "[\"Render 1 pass\"]");
    		prerender("MAYA_SM_012", 100, "[\"Render 100 pass\"]");
    		prerender("MAYA_SM_013", 500, "[\"Render 500 pass\"]");

    		activate_tone_mapping();
			prerender("MAYA_SM_014", 50, "[\"Tone Mapping\", \"Pass Limit: 50\"]");
    		deactivate_tone_mapping();

    		activate_render_stamp();
    		prerender("MAYA_SM_015", 50, "[\"Render Stamp\", \"Pass Limit: 50\"]");
    		deactivate_render_stamp();

    		activate_wireframe_mode();
			prerender("MAYA_SM_016", 50, "[\"Render mode wireframe\", \"Pass Limit: 50\"]");
    		deactivate_wireframe_mode();

    		activate_medium_quality();
    		prerender("MAYA_SM_017", 50, "[\"Quality medium\", \"Pass Limit: 50\"]");
    		deactivate_medium_quality();

    		change_image_size_hd720();
    		prerender("MAYA_SM_018", 50, "[\"Image Size 1280 720\", \"Pass Limit: 50\"]");
    		
    		change_image_size_custom();
    		prerender("MAYA_SM_019", 50, "[\"Image Size 1500 1125\", \"Pass Limit: 50\"]");

    		change_image_size_standart();

    		activate_png_format();
    		prerender("MAYA_SM_020", 50, "[\"Save image as png\", \"Pass Limit: 50\"]");
    		sysFile -copy ("{work_dir}/Color/MAYA_SM_020.jpg") ("{work_dir}" + "/../../../../jobs/Tests/pass.jpg");

    		activate_jpg_format();
    		prerender("MAYA_SM_021", 50, "[\"Save image as jpg\", \"Pass Limit: 50\"]");

    		activate_denoiser_bilateral();
    		prerender("MAYA_SM_022", 50, "[\"Denoiser Bilateral default\", \"Pass Limit: 50\"]");

    		activate_denoiser_lwr();
    		prerender("MAYA_SM_023", 50, "[\"Denoiser LWR default\", \"Pass Limit: 50\"]");

    		activate_denoiser_eaw();
    		prerender("MAYA_SM_024", 50, "[\"Denoiser EAW default\", \"Pass Limit: 50\"]");

    		deactivate_denoiser();

    		create_area_light();
    		prerender("MAYA_SM_025", 50, "[\"Base Light Area Light\", \"Pass Limit: 50\"]");
    		delete_area_light();

    		activate_uv();
    		prerender("MAYA_SM_026", 50, "[\"AOV UV\", \"Pass Limit: 50\"]");
    		deactivate_uv();

    		create_physical_light();
			prerender("MAYA_SM_027", 50, "[\"Physical Light\", \"Pass Limit: 50\"]");
    		delete_physical_light();

    		import_rpr_matlib();
    		prerender("MAYA_SM_028", 50, "[\"Assign material from Mat Library\", \"Pass Limit: 50\"]");

    		create_and_asign_pbr();
    		prerender("MAYA_SM_029", 50, "[\"Assign Pbr to object\", \"Pass Limit: 50\"]");

    		create_and_asign_uber();
    		prerender("MAYA_SM_030", 50, "[\"Assign Uber to object\", \"Pass Limit: 50\"]");

    	}} else if ($each == "instances.ma") {{

    		activate_jpg_format();

    		duplicate_500_instances();
    		prerender("MAYA_SM_031", 50, "[\"Instances\", \"Pass Limit: 50\"]");

    	}} else if ($each == "IES.ma") {{

    		activate_jpg_format();

    		multiple_ies_lights();
    		prerender("MAYA_SM_032", 50, "[\"12 lights in one scene\", \"Pass Limit: 50\"]");

    	}} else if ($each == "maya_shaderball.ma") {{

    		activate_jpg_format();

    		shadow_catcher_test();
    		prerender("MAYA_SM_033", 50, "[\"AOV Shadow Catcher\", \"Pass Limit: 50\"]");

    	}} else if ($each == "Uber_SSS.ma") {{

    		activate_jpg_format();

    		prerender("MAYA_SM_034", 50, "[\"SSS\", \"Pass Limit: 50\"]");

    	}} else if ($each == "displacement.ma") {{

    		activate_jpg_format();

    		prerender("MAYA_SM_035", 50, "[\"Displacement\", \"Pass Limit: 50\"]");

    	}} 
    	
    }}

	evalDeferred("quit -abort");
}}







