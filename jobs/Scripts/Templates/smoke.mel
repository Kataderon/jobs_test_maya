
global proc save_render(int $pass, string $test_name){{

	if( `pluginInfo -query -loaded RadeonProRender` == 0){{
    	loadPlugin RadeonProRender;
	}}

	setAttr "defaultRenderGlobals.currentRenderer" -type "string" "FireRender";
	setAttr "defaultRenderGlobals.imageFormat" 8;
	setAttr -type "string" defaultRenderGlobals.imageFilePrefix $test_name;
	setAttr "RadeonProRenderGlobals.completionCriteriaIterations" $pass;

	float $startTime = 0;
	float $testTime = 0;
	fireRender -waitForItTwo;
	$startTime = `timerX`;
	renderIntoNewWindow render;
	string $ff = "";
	sysFile -makeDir ("{outputFolder}" + "/Color");
	$ff = "{outputFolder}" + "/Color/" + $test_name;
	renderWindowEditor -edit  -dst "color" renderView;
	renderWindowEditor -edit -com -writeImage $ff renderView;
	$testTime = `timerX -startTime $startTime`;

	string $render_device = "{render_device}";
	optionVar -rm "RPR_DevicesSelected";
	if ($render_device == "gpu") {{
		optionVar -iva "RPR_DevicesSelected" 1;
		optionVar -iva "RPR_DevicesSelected" 0;
	}} else if ($render_device == "cpu"){{
		optionVar -iva "RPR_DevicesSelected" 0;
		optionVar -iva "RPR_DevicesSelected" 1;
	}} else if ($render_device == "dual"){{
		optionVar -iva "RPR_DevicesSelected" 1;
		optionVar -iva "RPR_DevicesSelected" 1;
	}}


	string $scene_name  = `file -q -sn -shn`;
	if ($scene_name == "") {{
		$scene_name = "untitled";
	}}
	string $render_device_name[] = `optionVar -q "RPR_DevicesName"`;
	string $RPR_version[] = `RPRImageComparing -rprPluginDetails`;
	string $filePath = "{outputFolder}" + "/" + $test_name + "_MAYA.json";
	int $fileID = `fopen $filePath "a"`;
	fprint $fileID ("[");
	fprint $fileID ("\r\n {{");
	fprint $fileID ("\r\n  \"render_device\": \"" + $render_device_name[0] + "\",");
	fprint $fileID ("\r\n  \"tool\": \"Maya " + `about -version` + "\",");
	fprint $fileID ("\r\n  \"date_time\": \"" + `date -format "YYYY-MM-DD_hh-mm-ss"` + "\",");
	fprint $fileID ("\r\n  \"render_version\": \"" + $RPR_version[0] + "\",");
	fprint $fileID ("\r\n  \"file_name\": \"" + $test_name + ".jpg\",");
	fprint $fileID ("\r\n  \"render_color_path\": \"Color/" + $test_name + ".jpg\",");
	fprint $fileID ("\r\n  \"render_time\": " + $testTime + ",");
	fprint $fileID ("\r\n  \"scene_name\": \"" + $scene_name + "\",");
	fprint $fileID ("\r\n  \"test_type\": \"" + "{testType}" + "\",");
	fprint $fileID ("\r\n  \"difference_color\": \"" + "not compared yet" + "\"");
	fprint $fileID ("\r\n }}");
	fprint $fileID ("\r\n]");
	fclose $fileID;

}}

global proc import_test(){{

	file -import -type "OBJ" -options "mo=-1"  -pr "C:/TestResources/BlenderAssets/scenes/example.obj";
	rename "polySurface1" "Shader_Ball";
}}

global proc create_uber_test(){{

	string $rpr = `shadingNode -asShader "RPRUberMaterial"`; 
	setAttr ($rpr + ".diffuse") 1; 
	setAttr ($rpr + ".diffuseColor") 1 0 0;
	string $sge = $rpr + "SG"; 
	sets -renderable true -noSurfaceShader true -empty -name $sge; 
	connectAttr -f ($rpr + ".outColor") ($sge + ".surfaceShader"); 
	select -r "Shader_Ball";
	string $sgs[] = `listConnections -type shadingEngine $rpr`;
	sets -e -forceElement $sgs[0];
}}

global proc create_IBL(){{

	string $iblNode = `createNode RPRIBL -n RPRIBLShape`;
	$parent = `listRelatives -p $iblNode`;
	setAttr ($parent[0] + ".scaleX") 1001.25663706144; //pi*5/10 ... something unique (for hierarchy change tracking)
	setAttr ($parent[0] + ".scaleY") 1001.25663706144;
	setAttr ($parent[0] + ".scaleZ") 1001.25663706144;
	rename $parent[0] RPRIBL;
}}

global proc create_sun_sky(){{

	delete RPRIBL;
	string $SkyNode = `createNode RPRSky -n RPRSkyShape`;
}}

global proc main(){{

	file -f -new;

	//file -f -options "v=0;"  -ignoreVersion -o "{testsList}";

	import_test();
	save_render(30, "import_test");

	create_uber_test();
	save_render(30, "uber_test");

	create_IBL();
	save_render(30, "ibl_test");

	create_sun_sky();
	save_render(30, "sky_sun_test");

	save_render(100, "full");

	evalDeferred("quit -abort");
}}







